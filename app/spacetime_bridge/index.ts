// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
    BinaryWriter,
    DbConnectionBuilder,
    DbConnectionImpl,
    SubscriptionBuilderImpl,
    type Event
} from "@clockworklabs/spacetimedb-sdk";

import type {
    CallReducerFlags,
    EventContextInterface,
    ErrorContextInterface,
    ReducerEventContextInterface,
    SubscriptionEventContextInterface,
} from '@clockworklabs/spacetimedb-sdk'

// Import and reexport all reducer arg types
import {CloseSession} from "./close_session_reducer.ts";
import {FinishGame} from "./finish_game_reducer.ts";
import {GenerateNewBoard} from "./generate_new_board_reducer.ts";
import {JoinGame} from "./join_game_reducer.ts";
import {SaveWord} from "./save_word_reducer.ts";
import {WordIsFound} from "./word_is_found_reducer.ts";
// Import and reexport all table handle types
import {BoardTableHandle} from "./board_table.ts";
import {DictionaryTableHandle} from "./dictionary_table.ts";
import {GameSessionTableHandle} from "./game_session_table.ts";
import {WordTableHandle} from "./word_table.ts";
// Import and reexport all types
import {BoardDatabaseModel} from "./board_database_model_type.ts";
import {DictionaryDatabaseModel} from "./dictionary_database_model_type.ts";
import {GameSessionDatabaseModel} from "./game_session_database_model_type.ts";
import {WordPlacementsDatabaseModel} from "./word_placements_database_model_type.ts";

export {CloseSession};
export {FinishGame};
export {GenerateNewBoard};
export {JoinGame};
export {SaveWord};
export {WordIsFound};

export {BoardTableHandle};
export {DictionaryTableHandle};
export {GameSessionTableHandle};
export {WordTableHandle};

export {BoardDatabaseModel};
export {DictionaryDatabaseModel};
export {GameSessionDatabaseModel};
export {WordPlacementsDatabaseModel};

const REMOTE_MODULE = {
    tables: {
        board: {
            tableName: "board",
            rowType: BoardDatabaseModel.getTypeScriptAlgebraicType(),
            primaryKey: "id",
        },
        dictionary: {
            tableName: "dictionary",
            rowType: DictionaryDatabaseModel.getTypeScriptAlgebraicType(),
            primaryKey: "word",
        },
        game_session: {
            tableName: "game_session",
            rowType: GameSessionDatabaseModel.getTypeScriptAlgebraicType(),
            primaryKey: "id",
        },
        word: {
            tableName: "word",
            rowType: WordPlacementsDatabaseModel.getTypeScriptAlgebraicType(),
            primaryKey: "id",
        },
    },
    reducers: {
        close_session: {
            reducerName: "close_session",
            argsType: CloseSession.getTypeScriptAlgebraicType(),
        },
        finish_game: {
            reducerName: "finish_game",
            argsType: FinishGame.getTypeScriptAlgebraicType(),
        },
        generate_new_board: {
            reducerName: "generate_new_board",
            argsType: GenerateNewBoard.getTypeScriptAlgebraicType(),
        },
        join_game: {
            reducerName: "join_game",
            argsType: JoinGame.getTypeScriptAlgebraicType(),
        },
        save_word: {
            reducerName: "save_word",
            argsType: SaveWord.getTypeScriptAlgebraicType(),
        },
        word_is_found: {
            reducerName: "word_is_found",
            argsType: WordIsFound.getTypeScriptAlgebraicType(),
        },
    },
    // Constructors which are used by the DbConnectionImpl to
    // extract type information from the generated RemoteModule.
    //
    // NOTE: This is not strictly necessary for `eventContextConstructor` because
    // all we do is build a TypeScript object which we could have done inside the
    // SDK, but if in the future we wanted to create a class this would be
    // necessary because classes have methods, so we'll keep it.
    eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
        return {
            ...(imp as DbConnection),
            event
        }
    },
    dbViewConstructor: (imp: DbConnectionImpl) => {
        return new RemoteTables(imp);
    },
    reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
        return new RemoteReducers(imp, setReducerFlags);
    },
    setReducerFlagsConstructor: () => {
        return new SetReducerFlags();
    }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
    | { name: "CloseSession", args: CloseSession }
    | { name: "FinishGame", args: FinishGame }
    | { name: "GenerateNewBoard", args: GenerateNewBoard }
    | { name: "JoinGame", args: JoinGame }
    | { name: "SaveWord", args: SaveWord }
    | { name: "WordIsFound", args: WordIsFound }
    ;

export class RemoteReducers {
    constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {
    }

    closeSession(boardId: string) {
        const __args = {boardId};
        let __writer = new BinaryWriter(1024);
        CloseSession.getTypeScriptAlgebraicType().serialize(__writer, __args);
        let __argsBuffer = __writer.getBuffer();
        this.connection.callReducer("close_session", __argsBuffer, this.setCallReducerFlags.closeSessionFlags);
    }

    onCloseSession(callback: (ctx: ReducerEventContext, boardId: string) => void) {
        this.connection.onReducer("close_session", callback);
    }

    removeOnCloseSession(callback: (ctx: ReducerEventContext, boardId: string) => void) {
        this.connection.offReducer("close_session", callback);
    }

    finishGame(boardId: string) {
        const __args = {boardId};
        let __writer = new BinaryWriter(1024);
        FinishGame.getTypeScriptAlgebraicType().serialize(__writer, __args);
        let __argsBuffer = __writer.getBuffer();
        this.connection.callReducer("finish_game", __argsBuffer, this.setCallReducerFlags.finishGameFlags);
    }

    onFinishGame(callback: (ctx: ReducerEventContext, boardId: string) => void) {
        this.connection.onReducer("finish_game", callback);
    }

    removeOnFinishGame(callback: (ctx: ReducerEventContext, boardId: string) => void) {
        this.connection.offReducer("finish_game", callback);
    }

    generateNewBoard(rows: number, cols: number, message: string) {
        const __args = {rows, cols, message};
        let __writer = new BinaryWriter(1024);
        GenerateNewBoard.getTypeScriptAlgebraicType().serialize(__writer, __args);
        let __argsBuffer = __writer.getBuffer();
        this.connection.callReducer("generate_new_board", __argsBuffer, this.setCallReducerFlags.generateNewBoardFlags);
    }

    onGenerateNewBoard(callback: (ctx: ReducerEventContext, rows: number, cols: number, message: string) => void) {
        this.connection.onReducer("generate_new_board", callback);
    }

    removeOnGenerateNewBoard(callback: (ctx: ReducerEventContext, rows: number, cols: number, message: string) => void) {
        this.connection.offReducer("generate_new_board", callback);
    }

    joinGame(boardId: string) {
        const __args = {boardId};
        let __writer = new BinaryWriter(1024);
        JoinGame.getTypeScriptAlgebraicType().serialize(__writer, __args);
        let __argsBuffer = __writer.getBuffer();
        this.connection.callReducer("join_game", __argsBuffer, this.setCallReducerFlags.joinGameFlags);
    }

    onJoinGame(callback: (ctx: ReducerEventContext, boardId: string) => void) {
        this.connection.onReducer("join_game", callback);
    }

    removeOnJoinGame(callback: (ctx: ReducerEventContext, boardId: string) => void) {
        this.connection.offReducer("join_game", callback);
    }

    saveWord(word: string) {
        const __args = {word};
        let __writer = new BinaryWriter(1024);
        SaveWord.getTypeScriptAlgebraicType().serialize(__writer, __args);
        let __argsBuffer = __writer.getBuffer();
        this.connection.callReducer("save_word", __argsBuffer, this.setCallReducerFlags.saveWordFlags);
    }

    onSaveWord(callback: (ctx: ReducerEventContext, word: string) => void) {
        this.connection.onReducer("save_word", callback);
    }

    removeOnSaveWord(callback: (ctx: ReducerEventContext, word: string) => void) {
        this.connection.offReducer("save_word", callback);
    }

    wordIsFound(boardId: string, word: string) {
        const __args = {boardId, word};
        let __writer = new BinaryWriter(1024);
        WordIsFound.getTypeScriptAlgebraicType().serialize(__writer, __args);
        let __argsBuffer = __writer.getBuffer();
        this.connection.callReducer("word_is_found", __argsBuffer, this.setCallReducerFlags.wordIsFoundFlags);
    }

    onWordIsFound(callback: (ctx: ReducerEventContext, boardId: string, word: string) => void) {
        this.connection.onReducer("word_is_found", callback);
    }

    removeOnWordIsFound(callback: (ctx: ReducerEventContext, boardId: string, word: string) => void) {
        this.connection.offReducer("word_is_found", callback);
    }

}

export class SetReducerFlags {
    closeSessionFlags: CallReducerFlags = 'FullUpdate';

    closeSession(flags: CallReducerFlags) {
        this.closeSessionFlags = flags;
    }

    finishGameFlags: CallReducerFlags = 'FullUpdate';

    finishGame(flags: CallReducerFlags) {
        this.finishGameFlags = flags;
    }

    generateNewBoardFlags: CallReducerFlags = 'FullUpdate';

    generateNewBoard(flags: CallReducerFlags) {
        this.generateNewBoardFlags = flags;
    }

    joinGameFlags: CallReducerFlags = 'FullUpdate';

    joinGame(flags: CallReducerFlags) {
        this.joinGameFlags = flags;
    }

    saveWordFlags: CallReducerFlags = 'FullUpdate';

    saveWord(flags: CallReducerFlags) {
        this.saveWordFlags = flags;
    }

    wordIsFoundFlags: CallReducerFlags = 'FullUpdate';

    wordIsFound(flags: CallReducerFlags) {
        this.wordIsFoundFlags = flags;
    }

}

export class RemoteTables {
    constructor(private connection: DbConnectionImpl) {
    }

    get board(): BoardTableHandle {
        return new BoardTableHandle(this.connection.clientCache.getOrCreateTable<BoardDatabaseModel>(REMOTE_MODULE.tables.board));
    }

    get dictionary(): DictionaryTableHandle {
        return new DictionaryTableHandle(this.connection.clientCache.getOrCreateTable<DictionaryDatabaseModel>(REMOTE_MODULE.tables.dictionary));
    }

    get gameSession(): GameSessionTableHandle {
        return new GameSessionTableHandle(this.connection.clientCache.getOrCreateTable<GameSessionDatabaseModel>(REMOTE_MODULE.tables.game_session));
    }

    get word(): WordTableHandle {
        return new WordTableHandle(this.connection.clientCache.getOrCreateTable<WordPlacementsDatabaseModel>(REMOTE_MODULE.tables.word));
    }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
}

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
    static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
        return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
    }
    subscriptionBuilder = (): SubscriptionBuilder => {
        return new SubscriptionBuilder(this);
    }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
